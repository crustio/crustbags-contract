#include "imports/stdlib.fc";
#include "constants.fc";
#include "messages.fc";
#include "params.fc";
#include "utils.fc";

{-
    storage#_
        admin_address:MsgAddress treasury_address:MsgAddress storage_contract_code:^Cell
        config_params_dict:^Cell storage_provider_white_list_dict:^Cell = Storage;
-}
(slice, slice, cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();

    var admin_address = ds~load_msg_addr();
    var treasury_address = ds~load_msg_addr();
    var storage_contract_code = ds~load_ref();
    var config_params_dict = ds~load_dict();
    var storage_provider_white_list_dict = ds~load_dict();

    return (admin_address, treasury_address, storage_contract_code, config_params_dict, storage_provider_white_list_dict);
}

() save_data(
    slice admin_address, slice treasury_address, cell storage_contract_code,
    cell config_params_dict, cell storage_provider_white_list_dict
) impure inline {
    set_data(
        begin_cell()
            .store_slice(admin_address)
            .store_slice(treasury_address)
            .store_ref(storage_contract_code)
            .store_dict(config_params_dict)
            .store_dict(storage_provider_white_list_dict)
            .end_cell()
    );
}

int get_config_param(int param, int default_value) inline {
    ;; ~strdump("get_config_param():");
    ;; ~dump(param);
    (slice admin_address, slice treasury_address, cell storage_contract_code, cell config_params_dict, cell storage_provider_white_list_dict) = load_data();
    var (val, found?) = config_params_dict.udict_get_ref?(256, param);
    if (~ found?) {
        return default_value;
    }
    var ds = val.begin_parse();
    var value = ds~load_uint(64);
    ;; ~dump(value);
    return value;
}

() set_config_param(int param, int value) impure inline {
    ;; ~strdump("set_config_param(), param, value:");
    ;; ~dump([param, value]);
    (slice admin_address, slice treasury_address, cell storage_contract_code, cell config_params_dict, cell storage_provider_white_list_dict) = load_data();
    config_params_dict~udict_set_ref(256, param, begin_cell().store_uint(value, 64).end_cell());
    save_data(admin_address, treasury_address, storage_contract_code, config_params_dict, storage_provider_white_list_dict);
}

() add_storage_provider_to_white_list(slice storage_provider_address) impure inline {
    (int wc, int storage_provider_addr) = parse_std_addr(storage_provider_address);

    (slice admin_address, slice treasury_address, cell storage_contract_code, cell config_params_dict, cell storage_provider_white_list_dict) = load_data();
    storage_provider_white_list_dict~udict_set_ref(256, storage_provider_addr, begin_cell().store_uint(1, 1).end_cell());
    save_data(admin_address, treasury_address, storage_contract_code, config_params_dict, storage_provider_white_list_dict);
}

() remove_storage_provider_from_white_list(slice storage_provider_address) impure inline {
    (int wc, int storage_provider_addr) = parse_std_addr(storage_provider_address);

    (slice admin_address, slice treasury_address, cell storage_contract_code, cell config_params_dict, cell storage_provider_white_list_dict) = load_data();
    storage_provider_white_list_dict~udict_set_ref(256, storage_provider_addr, begin_cell().store_uint(0, 1).end_cell());
    save_data(admin_address, treasury_address, storage_contract_code, config_params_dict, storage_provider_white_list_dict);
}

() deploy_storage_contract(
    cell storage_contract_code, slice owner_address, int query_id,
    int torrent_hash, int file_size, int merkle_hash, int chunk_size, int initial_storage_fee, int storage_period_in_sec
) impure {
    var minimal_file_size = get_config_param(config::min_file_size_in_bytes, default_minimal_file_size_in_bytes);
    var maximal_file_size = get_config_param(config::max_file_size_in_bytes, default_maximal_file_size_in_bytes);
    throw_unless(error::file_too_small, file_size >= minimal_file_size);
    throw_unless(error::file_too_large, file_size <= maximal_file_size);

    var min_storage_period_in_sec = get_config_param(config::min_storage_period_in_sec, default_min_storage_period_in_sec);
    throw_unless(error::too_short_storage_period, storage_period_in_sec >= min_storage_period_in_sec);

    var (admin_address, treasury_address, storage_contract_code, config_params_dict, storage_provider_white_list_dict) = load_data();

    var max_storage_proof_span_in_sec = get_config_param(config::max_storage_proof_span_in_sec, default_max_storage_proof_span);
    var treasury_fee_rate = get_config_param(config::treasury_fee_rate, 0);
    if (treasury_fee_rate > max_treasury_fee_rate) {
        treasury_fee_rate = max_treasury_fee_rate;
    }
    var max_storage_providers_per_order = get_config_param(config::max_storage_providers_per_order, default_max_storage_providers_per_order);
    cell state_init = build_storage_contract_stateinit(
        storage_contract_code, torrent_hash, owner_address, merkle_hash, file_size, chunk_size,
        initial_storage_fee, storage_period_in_sec, max_storage_proof_span_in_sec,
        treasury_address, treasury_fee_rate, max_storage_providers_per_order, storage_provider_white_list_dict
    );
    slice storage_contract_address = calculate_storage_contract_address(state_init);

    ;; what if there is already a contract at this address? can it be detected?

    cell master_msg = begin_cell().end_cell();
    var msg = begin_cell()
        .store_msg_flag(msg_flag::non_bounceable)
        .store_slice(storage_contract_address)
        .store_coins(0)  ;; storage fees and additional gas are sent via `CARRY_REMAINING_GAS` flag
        .store_msgbody_prefix_stateinit(state_init, master_msg); ;; store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1).store_ref(state_init).store_ref(ref);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs
  
    int op = in_msg_body~load_op();
    int query_id = in_msg_body~load_query_id();

    (slice admin_address, slice treasury_address, cell storage_contract_code, cell config_params_dict, cell storage_provider_white_list_dict) = load_data();

    if (op == op::upgrade) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, admin_address));
        cell code = in_msg_body~load_ref();
        set_code(code);
        return ();
    }

    if (op == op::update_admin) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(new_admin_address, treasury_address, storage_contract_code, config_params_dict, storage_provider_white_list_dict);
        return ();
    }

    if (op == op::update_treasury) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, admin_address));
        slice new_treasury_address = in_msg_body~load_msg_addr();
        save_data(admin_address, new_treasury_address, storage_contract_code, config_params_dict, storage_provider_white_list_dict);
        return ();
    }

    if (op == op::update_storage_contract_code) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, admin_address));
        cell new_storage_contract_code = in_msg_body~load_ref();
        save_data(admin_address, treasury_address, new_storage_contract_code, config_params_dict, storage_provider_white_list_dict);
        return ();
    }

    if (op == op::set_config_param) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, admin_address));
        ;; ~strdump("op::set_config_param");
        int param = in_msg_body~load_uint(256);
        int value = in_msg_body~load_uint(64);
        set_config_param(param, value);
        return ();
    }

    if (op == op::add_storage_provider_to_white_list) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, admin_address));
        slice storage_provider_address = in_msg_body~load_msg_addr();
        add_storage_provider_to_white_list(storage_provider_address);
        return ();
    }

    if (op == op::remove_storage_provider_from_white_list) {
        throw_unless(error::unauthorized, equal_slice_bits(sender_address, admin_address));
        slice storage_provider_address = in_msg_body~load_msg_addr();
        remove_storage_provider_from_white_list(storage_provider_address);
        return ();
    }

    if (op == op::place_storage_order) {
        int torrent_hash = in_msg_body~load_uint(256);
        int file_size = in_msg_body~load_uint(64);
        int merkle_hash = in_msg_body~load_uint(256);
        int chunk_size = in_msg_body~load_uint(32);
        int total_storage_fee = in_msg_body~load_coins(); ;; VarUInteger 16
        int storage_period_in_sec = in_msg_body~load_uint(256);

        var min_storage_fee = get_config_param(config::min_storage_fee, default_min_storage_fee);
        throw_unless(error::not_enough_storage_fee, total_storage_fee >= min_storage_fee);
        throw_unless(error::not_enough_storage_fee, msg_value >= total_storage_fee);

        deploy_storage_contract(
            storage_contract_code, sender_address, query_id, torrent_hash,
            file_size, merkle_hash, chunk_size, total_storage_fee, storage_period_in_sec
        );

        return ();
    }

    throw(error::unknown_op);
}

slice get_admin_address() method_id {
    (slice admin_address, slice treasury_address, cell storage_contract_code, cell config_params_dict, cell storage_provider_white_list_dict) = load_data();
    return admin_address;
}

slice get_treasury_address() method_id {
    (slice admin_address, slice treasury_address, cell storage_contract_code, cell config_params_dict, cell storage_provider_white_list_dict) = load_data();
    return treasury_address;
}

int get_param_value(int param, int default_value) method_id {
    int value = get_config_param(param, default_value);
    return value;
}

slice get_storage_contract_address(
    cell storage_contract_code, slice owner_address,
    int torrent_hash, int file_size, int merkle_hash, int chunk_size, int initial_storage_fee,
    int storage_period_in_sec, int max_storage_proof_span_in_sec,
    slice treasury_address, int treasury_fee_rate, int max_storage_providers_per_order, cell storage_provider_white_list_dict
) method_id {
    var ds = storage_provider_white_list_dict.begin_parse();
    cell state_init = build_storage_contract_stateinit(
        storage_contract_code, torrent_hash, owner_address, merkle_hash, file_size, chunk_size,
        initial_storage_fee, storage_period_in_sec, max_storage_proof_span_in_sec,
        treasury_address, treasury_fee_rate, max_storage_providers_per_order, ds~load_dict()
    );
    slice storage_contract_address = calculate_storage_contract_address(state_init);
    return storage_contract_address;
}

cell get_storage_provider_white_list_dict() method_id {
    (slice admin_address, slice treasury_address, cell storage_contract_code, cell config_params_dict, cell storage_provider_white_list_dict) = load_data();
    return begin_cell().store_dict(storage_provider_white_list_dict).end_cell();
}

int is_storage_provider_white_listed(slice storage_provider_address) method_id {
    (int wc, int storage_provider_addr) = parse_std_addr(storage_provider_address);

    (slice admin_address, slice treasury_address, cell storage_contract_code, cell config_params_dict, cell storage_provider_white_list_dict) = load_data();
    var (val, found?) = storage_provider_white_list_dict.udict_get_ref?(256, storage_provider_addr);
    if (~ found?) {
        return 0;
    }
    var ds = val.begin_parse();
    var value = ds~load_uint(1);
    return value;
}