#include "imports/stdlib.fc";
#include "constants.fc";
#include "messages.fc";

const int SCALE = 1000000000 * 1000000000; ;;10^18

{-
    storage#_
        order_info:^Cell rewards_params:^Cell storage_providers_info:^Cell rewards_settlement_info:^Cell = Storage;
-}

(cell, cell, cell, cell, cell, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();

    var order_info = ds~load_ref();
    var rewards_params = ds~load_ref();

    var storage_providers_info = ds~load_ref().begin_parse();
    var storage_providers = storage_providers_info~load_dict();
    var storage_provider_last_proof_times = storage_providers_info~load_dict();
    var storage_provider_last_proof_valid = storage_providers_info~load_dict();
    var storage_provider_next_proofs = storage_providers_info~load_dict();

    var rewards_settlement_info = ds~load_ref().begin_parse();
    var total_rewards_settled_and_unclaimed_for_providers_scaled = rewards_settlement_info~load_dict();
    var per_sec_total_rewards_settled_for_providers_scaled = rewards_settlement_info~load_dict();

    return (
        order_info, rewards_params, storage_providers, storage_provider_last_proof_times, storage_provider_last_proof_valid, storage_provider_next_proofs, total_rewards_settled_and_unclaimed_for_providers_scaled, per_sec_total_rewards_settled_for_providers_scaled
    );
}

(int, slice, int, int, int, int, slice, int) load_order_info() inline {
    var ds = get_data().begin_parse();
    var (order_info, residue) = (ds~load_ref(), ds);
    
    ds = order_info.begin_parse();
    var (
        torrent_hash, owner_address, file_merkle_hash, file_size_in_bytes, storage_period_in_sec, max_storage_proof_span_in_sec,
        treasury_info
    ) = (
        ds~load_uint(256), ds~load_msg_addr(), ds~load_uint(256), ds~load_uint(64), ds~load_uint(64), ds~load_uint(64),
        ds~load_ref()
    );
    ds = treasury_info.begin_parse();
    var (
        treasury_address, treasury_fee_rate
    ) = (
        ds~load_msg_addr(), ds~load_uint(16)
    );
    return (
        torrent_hash, owner_address, file_merkle_hash, file_size_in_bytes, storage_period_in_sec, max_storage_proof_span_in_sec,
        treasury_address, treasury_fee_rate
    );
}

(int, int, int, int, int, int, int, int) load_rewards_params() inline {
    var ds = get_data().begin_parse();
    var (_, rewards_params, residue) = (ds~load_ref(), ds~load_ref(), ds);

    ds = rewards_params.begin_parse();
    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = (
        ds~load_uint(1), ds~load_uint(32), ds~load_uint(192), ds~load_uint(192), ds~load_uint(192),
        ds~load_uint(192), ds~load_uint(32), ds~load_uint(32)
    );

    return (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    );
}

() save_rewards_params(
    started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
    per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
) impure {
    var ds = get_data().begin_parse();
    var (
        order_info, _, residue
    ) = (
        ds~load_ref(), ds~load_ref(), ds
    );
    var rewards_params = begin_cell()
        .store_uint(started, 1)
        .store_uint(total_storage_providers, 32)
        .store_uint(total_rewards, 192)
        .store_uint(total_rewards_per_sec_scaled, 192)
        .store_uint(undistributed_rewards_scaled, 192)
        .store_uint(per_sec_per_provider_total_rewards_settled_scaled, 192)
        .store_uint(period_finish, 32)
        .store_uint(last_settle_time, 32)
        .end_cell();

    set_data(
        begin_cell()
            .store_ref(order_info)
            .store_ref(rewards_params)
            .store_slice(residue)
            .end_cell()
    );
}

cell load_storage_providers_dict() inline {
    var ds = get_data().begin_parse();
    var (
        _, _, storage_providers_info, residue
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds
    );

    ds = storage_providers_info.begin_parse();
    return ds~load_dict();
}

() save_storage_providers_dict(cell storage_providers_dict) impure inline {
    var ds = get_data().begin_parse();
    var (
        order_info, rewards_params, storage_providers_info, residue
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds
    );

    ds = storage_providers_info.begin_parse();
    var (
        _, storage_provider_last_proof_times, storage_provider_last_proof_valid, storage_provider_next_proofs
    ) = (
        ds~load_dict(), ds~load_dict(), ds~load_dict(), ds~load_dict()
    );
    
    storage_providers_info = begin_cell()
        .store_dict(storage_providers_dict)
        .store_dict(storage_provider_last_proof_times)
        .store_dict(storage_provider_last_proof_valid)
        .store_dict(storage_provider_next_proofs)
        .end_cell();

    set_data(
        begin_cell()
            .store_ref(order_info)
            .store_ref(rewards_params)
            .store_ref(storage_providers_info)
            .store_slice(residue)
            .end_cell()
    );
}

cell load_storage_provider_last_proof_times() inline {
    var ds = get_data().begin_parse();
    var (
        _, _, storage_providers_info, residue
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds
    );

    ds = storage_providers_info.begin_parse();
    var (
        storage_providers, storage_provider_last_proof_times, storage_provider_last_proof_valid, storage_provider_next_proofs
    ) = (
        ds~load_dict(), ds~load_dict(), ds~load_dict(), ds~load_dict()
    );
    return storage_provider_last_proof_times;
}

() save_storage_provider_last_proof_times(cell storage_provider_last_proof_times) impure inline {
    var ds = get_data().begin_parse();
    var (
        order_info, rewards_params, storage_providers_info, residue
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds
    );

    ds = storage_providers_info.begin_parse();
    var (
        storage_providers, _, storage_provider_last_proof_valid, storage_provider_next_proofs
    ) = (
        ds~load_dict(), ds~load_dict(), ds~load_dict(), ds~load_dict()
    );
    
    storage_providers_info = begin_cell()
        .store_dict(storage_providers)
        .store_dict(storage_provider_last_proof_times)
        .store_dict(storage_provider_last_proof_valid)
        .store_dict(storage_provider_next_proofs)
        .end_cell();

    set_data(
        begin_cell()
            .store_ref(order_info)
            .store_ref(rewards_params)
            .store_ref(storage_providers_info)
            .store_slice(residue)
            .end_cell()
    );
}

cell load_storage_provider_last_proof_valid() inline {
    var ds = get_data().begin_parse();
    var (
        _, _, storage_providers_info, residue
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds
    );

    ds = storage_providers_info.begin_parse();
    var (
        storage_providers, storage_provider_last_proof_times, storage_provider_last_proof_valid, storage_provider_next_proofs
    ) = (
        ds~load_dict(), ds~load_dict(), ds~load_dict(), ds~load_dict()
    );
    return storage_provider_last_proof_valid;
}

() save_storage_provider_last_proof_valid(cell storage_provider_last_proof_valid) impure inline {
    var ds = get_data().begin_parse();
    var (
        order_info, rewards_params, storage_providers_info, residue
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds
    );

    ds = storage_providers_info.begin_parse();
    var (
        storage_providers, storage_provider_last_proof_times, _, storage_provider_next_proofs
    ) = (
        ds~load_dict(), ds~load_dict(), ds~load_dict(), ds~load_dict()
    );
    
    storage_providers_info = begin_cell()
        .store_dict(storage_providers)
        .store_dict(storage_provider_last_proof_times)
        .store_dict(storage_provider_last_proof_valid)
        .store_dict(storage_provider_next_proofs)
        .end_cell();

    set_data(
        begin_cell()
            .store_ref(order_info)
            .store_ref(rewards_params)
            .store_ref(storage_providers_info)
            .store_slice(residue)
            .end_cell()
    );
}

cell load_storage_provider_next_proofs() inline {
    var ds = get_data().begin_parse();
    var (
        _, _, storage_providers_info, residue
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds
    );

    ds = storage_providers_info.begin_parse();
    var (
        storage_providers, storage_provider_last_proof_times, storage_provider_last_proof_valid, storage_provider_next_proofs
    ) = (
        ds~load_dict(), ds~load_dict(), ds~load_dict(), ds~load_dict()
    );
    return storage_provider_next_proofs;
}

() save_storage_provider_next_proofs(cell storage_provider_next_proofs) impure inline {
    var ds = get_data().begin_parse();
    var (
        order_info, rewards_params, storage_providers_info, residue
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds
    );

    ds = storage_providers_info.begin_parse();
    var (
        storage_providers, storage_provider_last_proof_times, storage_provider_last_proof_valid, _
    ) = (
        ds~load_dict(), ds~load_dict(), ds~load_dict(), ds~load_dict()
    );
    
    storage_providers_info = begin_cell()
        .store_dict(storage_providers)
        .store_dict(storage_provider_last_proof_times)
        .store_dict(storage_provider_last_proof_valid)
        .store_dict(storage_provider_next_proofs)
        .end_cell();

    set_data(
        begin_cell()
            .store_ref(order_info)
            .store_ref(rewards_params)
            .store_ref(storage_providers_info)
            .store_slice(residue)
            .end_cell()
    );
}

cell load_total_rewards_settled_and_unclaimed_for_providers() inline {
    var ds = get_data().begin_parse();
    var (
        _, _, _, rewards_settlement_info
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds~load_ref()
    );
    
    ds = rewards_settlement_info.begin_parse();
    var (
        total_rewards_settled_and_unclaimed_for_providers_scaled, residue
    ) = (
        ds~load_dict(), ds
    );
    return total_rewards_settled_and_unclaimed_for_providers_scaled;
}

() save_total_rewards_settled_and_unclaimed_for_providers(cell total_rewards_settled_and_unclaimed_for_providers_scaled) impure inline {
    var ds = get_data().begin_parse();
    var (
        order_info, rewards_params, storage_providers_info, rewards_settlement_info
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds~load_ref()
    );

    ds = rewards_settlement_info.begin_parse();
    var (
        _, per_sec_total_rewards_settled_for_providers_scaled
    ) = (
        ds~load_dict(), ds~load_dict()
    );
    
    rewards_settlement_info = begin_cell()
        .store_dict(total_rewards_settled_and_unclaimed_for_providers_scaled)
        .store_dict(per_sec_total_rewards_settled_for_providers_scaled)
        .end_cell();

    set_data(
        begin_cell()
            .store_ref(order_info)
            .store_ref(rewards_params)
            .store_ref(storage_providers_info)
            .store_ref(rewards_settlement_info)
            .end_cell()
    );
}

cell load_per_sec_total_rewards_settled_for_providers() inline {
    var ds = get_data().begin_parse();
    var (
        _, _, _, rewards_settlement_info
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds~load_ref()
    );

    ds = rewards_settlement_info.begin_parse();
    var (
        total_rewards_settled_and_unclaimed_for_providers_scaled, per_sec_total_rewards_settled_for_providers_scaled
    ) = (
        ds~load_dict(), ds~load_dict()
    );
    return per_sec_total_rewards_settled_for_providers_scaled;
}

() save_per_sec_total_rewards_settled_for_providers(cell per_sec_total_rewards_settled_for_providers_scaled) impure inline {
    var ds = get_data().begin_parse();
    var (
        order_info, rewards_params, storage_providers_info, rewards_settlement_info
    ) = (
        ds~load_ref(), ds~load_ref(), ds~load_ref(), ds~load_ref()
    );

    ds = rewards_settlement_info.begin_parse();
    var (
        total_rewards_settled_and_unclaimed_for_providers_scaled, _
    ) = (
        ds~load_dict(), ds~load_dict()
    );
    
    rewards_settlement_info = begin_cell()
        .store_dict(total_rewards_settled_and_unclaimed_for_providers_scaled)
        .store_dict(per_sec_total_rewards_settled_for_providers_scaled)
        .end_cell();

    set_data(
        begin_cell()
            .store_ref(order_info)
            .store_ref(rewards_params)
            .store_ref(storage_providers_info)
            .store_ref(rewards_settlement_info)
            .end_cell()
    );
}

int load_total_storage_providers() inline {
    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    return total_storage_providers;
}

int settle_time_applicable() inline {
    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    return (now() <= period_finish) ? now() : period_finish;
}

int per_sec_per_provider_total_rewards_till_now() inline {
    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    if (total_storage_providers == 0) {
        return per_sec_per_provider_total_rewards_settled_scaled;
    }
    else {
        var rewards = per_sec_per_provider_total_rewards_settled_scaled + (
            (settle_time_applicable() - last_settle_time) * total_rewards_per_sec_scaled / total_storage_providers
        );
        ~strdump("per_sec_per_provider_total_rewards_till_now(), old value, total_storage_providers, new rewards:");
        ~dump([per_sec_per_provider_total_rewards_settled_scaled, total_storage_providers, rewards]);
        return rewards;
    }
}

int per_sec_total_rewards_pending_settle_for_provider(slice provider_address) inline {
    (int wc, int provider_addr) = parse_std_addr(provider_address);

    var dict = load_per_sec_total_rewards_settled_for_providers();
    var (val, found?) = dict.udict_get_ref?(256, provider_addr);
    if (~ found?) {
        return 0;
    }
    var ds = val.begin_parse();
    var coins = ds~load_uint(192);

    var perSecPerProviderTotalRewardsTillNow = per_sec_per_provider_total_rewards_till_now();
    ~strdump("per_sec_total_rewards_pending_settle_for_provider():");
    ~dump([perSecPerProviderTotalRewardsTillNow, coins]);

    return perSecPerProviderTotalRewardsTillNow - coins;
}

() do_settle_rewards(slice provider_address, int new_worker, int settle_new_rewards) impure {
    (int wc, int provider_addr) = parse_std_addr(provider_address);
    ~strdump("do_settle_rewards(): start");

    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    per_sec_per_provider_total_rewards_settled_scaled = per_sec_per_provider_total_rewards_till_now();
    last_settle_time = settle_time_applicable();
    save_rewards_params(
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    );

    if (new_worker) {
        var total_rewards_settled_and_unclaimed_for_providers_scaled = load_total_rewards_settled_and_unclaimed_for_providers();
        total_rewards_settled_and_unclaimed_for_providers_scaled~udict_set_ref(256, provider_addr, begin_cell().store_uint(0, 192).end_cell());
        save_total_rewards_settled_and_unclaimed_for_providers(total_rewards_settled_and_unclaimed_for_providers_scaled);
    }
    elseif (settle_new_rewards) {
        var pending_settled = per_sec_total_rewards_pending_settle_for_provider(provider_address);

        var total_rewards_settled_and_unclaimed_for_providers_scaled = load_total_rewards_settled_and_unclaimed_for_providers();
        var (earned, success?) = total_rewards_settled_and_unclaimed_for_providers_scaled.udict_get_ref?(256, provider_addr);
        
        if (success?) {
            var ds = earned.begin_parse();
            var coins = ds~load_uint(192);
            ~dump([pending_settled, coins]);
            pending_settled = pending_settled + coins;
            
        }
        ~strdump("do_settle_rewards(): update total_rewards_settled_and_unclaimed_for_providers_scaled[x] to");
        ~dump([pending_settled]);
        total_rewards_settled_and_unclaimed_for_providers_scaled~udict_set_ref(256, provider_addr, begin_cell().store_uint(pending_settled, 192).end_cell());
        save_total_rewards_settled_and_unclaimed_for_providers(total_rewards_settled_and_unclaimed_for_providers_scaled);
    }

    var per_sec_total_rewards_settled_for_providers_scaled = load_per_sec_total_rewards_settled_for_providers();
    per_sec_total_rewards_settled_for_providers_scaled~udict_set_ref(256, provider_addr, begin_cell().store_uint(per_sec_per_provider_total_rewards_settled_scaled, 192).end_cell());
    save_per_sec_total_rewards_settled_for_providers(per_sec_total_rewards_settled_for_providers_scaled);

    ~strdump("do_settle_rewards(): end");
}

() register_as_provider(slice provider_address) impure {
    (int wc, int provider_addr) = parse_std_addr(provider_address);

    var storage_providers_dict = load_storage_providers_dict();
    var (_, success?) = storage_providers_dict.udict_get?(256, provider_addr);
    if (success?) {
        throw(error::storage_provider_already_registered);
    }
    do_settle_rewards(provider_address, 1, 0);

    var first_worker = storage_providers_dict.dict_empty?();
    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    var (
        torrent_hash, owner_address, file_merkle_hash, file_size_in_bytes, storage_period_in_sec, max_storage_proof_span_in_sec,
        treasury_address, treasury_fee_rate
    ) = load_order_info();
    if ((~ started) & first_worker) {
        ~strdump("register_as_provider(), first_worker");
        started = 1;
        total_rewards_per_sec_scaled = total_rewards * (SCALE) / storage_period_in_sec;
        last_settle_time = now();
        period_finish = now() + storage_period_in_sec;
    }

    total_storage_providers += 1;
    save_rewards_params(
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    );

    storage_providers_dict~udict_set_ref(256, provider_addr, begin_cell().store_uint(1, 1).end_cell());
    save_storage_providers_dict(storage_providers_dict);
    throw_unless(error::invalid_storage_provider, ~ equal_slice_bits(provider_address, owner_address));
    var next_proof = rand(file_size_in_bytes);
    var storage_provider_next_proofs_dict = load_storage_provider_next_proofs();
    storage_provider_next_proofs_dict~udict_set_ref(256, provider_addr, begin_cell().store_uint(next_proof, 64).end_cell());
    save_storage_provider_next_proofs(storage_provider_next_proofs_dict);

    var last_work_report_time_dict = load_storage_provider_last_proof_times();
    last_work_report_time_dict~udict_set_ref(256, provider_addr, begin_cell().store_uint(now(), 32).end_cell());
    save_storage_provider_last_proof_times(last_work_report_time_dict);
}

() exit(slice provider_address) impure {
    (int wc, int provider_addr) = parse_std_addr(provider_address);

    var storage_providers_dict = load_storage_providers_dict();
    var (_, success?) = storage_providers_dict.udict_get?(256, provider_addr);
    if (~ success?) {
        throw(error::unregistered_storage_provider);
    }

    var pending_rewards = per_sec_total_rewards_pending_settle_for_provider(provider_address);
    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    undistributed_rewards_scaled += pending_rewards;
    save_rewards_params(
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    );

    do_settle_rewards(provider_address, 0, 0);

    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    total_storage_providers -= 1;
    save_rewards_params(
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    );

    storage_providers_dict~udict_delete?(256, provider_addr);
    save_storage_providers_dict(storage_providers_dict);

    var last_work_report_time_dict = load_storage_provider_last_proof_times();
    last_work_report_time_dict~udict_delete?(256, provider_addr);
    save_storage_provider_last_proof_times(last_work_report_time_dict);
}

() claim_rewards(slice provider_address) impure {
    (int wc, int provider_addr) = parse_std_addr(provider_address);
    do_settle_rewards(provider_address, 0, 0);

    var total_rewards_settled_and_unclaimed_for_providers_scaled = load_total_rewards_settled_and_unclaimed_for_providers();
    var (earned, success?) = total_rewards_settled_and_unclaimed_for_providers_scaled.udict_get_ref?(256, provider_addr);
    if (success?) {
        total_rewards_settled_and_unclaimed_for_providers_scaled~udict_set_ref(256, provider_addr, begin_cell().store_uint(0, 192).end_cell());
        save_total_rewards_settled_and_unclaimed_for_providers(total_rewards_settled_and_unclaimed_for_providers_scaled);
        var ds = earned.begin_parse();
        var total_rewards = ds~load_uint(192);
        var treasury_fees = 0;
        var net_rewards = total_rewards;

        var (
            torrent_hash, owner_address, file_merkle_hash, file_size_in_bytes, storage_period_in_sec, max_storage_proof_span_in_sec,
            treasury_address, treasury_fee_rate
        ) = load_order_info();
        if (treasury_fee_rate > 0) {
            treasury_fees = total_rewards * treasury_fee_rate / 10000;
            net_rewards = total_rewards - treasury_fees;
        }

        if (treasury_fees > 0) {
            cell msg = begin_cell()
                .store_msg_flag(msg_flag::non_bounceable)
                .store_slice(treasury_address)
                .store_coins(treasury_fees / SCALE)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(0, 32) ;; zero opcode
                .store_slice("Storage Treasury Fees") 
                .end_cell();
            send_raw_message(msg, CARRY_REMAINING_GAS);
        }

        cell msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable)
            .store_slice(provider_address)
            .store_coins(net_rewards / SCALE)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0, 32) ;; zero opcode
            .store_slice("Storage Fees") 
            .end_cell();
        send_raw_message(msg, CARRY_REMAINING_GAS);
    }
}

() recycle(slice caller_address) impure {
    var (
        torrent_hash, owner_address, file_merkle_hash, file_size_in_bytes, storage_period_in_sec, max_storage_proof_span_in_sec,
        treasury_address, treasury_fee_rate
    ) = load_order_info();
    throw_unless(error::unauthorized, equal_slice_bits(caller_address, owner_address));

    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    throw_unless(error::storage_order_unexpired, (period_finish > 0) & (now() > period_finish));

    if (undistributed_rewards_scaled > 0) {
        var coins = undistributed_rewards_scaled / SCALE;
        ~dump([undistributed_rewards_scaled, coins]);
        cell msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable)
            .store_slice(owner_address)
            .store_coins(coins)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0, 32) ;; zero opcode
            .store_slice("Recycle Fees")
            .end_cell();
        send_raw_message(msg, CARRY_REMAINING_GAS);

        undistributed_rewards_scaled = 0;
        save_rewards_params(
            started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
            per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
        );
    }
}

int check_proof(int merkle_hash, int byte_to_proof, int file_size, cell file_dict_proof) {
    slice cs = file_dict_proof.begin_parse();
    var hash = cs~load_uint(256);
    if (hash != merkle_hash) {
        return 0;
    }
    ;; todo: implement merkle tree proof verification
    return 1;
}

() on_submit_storage_proof(slice provider_address, int valid) impure {
    (int wc, int provider_addr) = parse_std_addr(provider_address);

    var storage_providers_dict = load_storage_providers_dict();
    var (_, success?) = storage_providers_dict.udict_get?(256, provider_addr);
    if (~ success?) {
        throw(error::unregistered_storage_provider);
    }
    if (valid == 0) {
        return ();
    }

    var last_work_report_time = 0;
    var last_work_report_time_dict = load_storage_provider_last_proof_times();
    var (val, found?) = last_work_report_time_dict.udict_get_ref?(256, provider_addr);
    if (found?) {
        var ds = val.begin_parse();
        last_work_report_time = ds~load_uint(32);
    }

    var (
        torrent_hash, owner_address, file_merkle_hash, file_size_in_bytes, storage_period_in_sec, max_storage_proof_span_in_sec,
        treasury_address, treasury_fee_rate
    ) = load_order_info();
    var in_report_window = (now() - last_work_report_time) <= max_storage_proof_span_in_sec;
    if (~ in_report_window) {
        var (
            started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
            per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
        ) = load_rewards_params();
        undistributed_rewards_scaled += per_sec_total_rewards_pending_settle_for_provider(provider_address);
        save_rewards_params(
            started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
            per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
        );
    }

    do_settle_rewards(provider_address, 0, in_report_window);

    var last_work_report_time_dict = load_storage_provider_last_proof_times();
    last_work_report_time_dict~udict_set_ref(256, provider_addr, begin_cell().store_uint(now(), 32).end_cell());
    save_storage_provider_last_proof_times(last_work_report_time_dict);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    (int wc, int sender_addr) = parse_std_addr(sender_address);
    if (in_msg_body.slice_empty?()) {
        throw(error::unknown_op);
    }

    int op = in_msg_body~load_uint(32);
    if (op == 0) {
        throw(error::unknown_op);
    }

    int query_id = in_msg_body~load_uint(64);
    if (op == op::register_as_storage_provider) {
        register_as_provider(sender_address);
        return ();
    }
    if (op == op::unregister_as_storage_provider) {
        exit(sender_address);
        return ();
    }
    if (op == op::claim_storage_rewards) {
        claim_rewards(sender_address);
        return ();
    }

    if (op == op::submit_storage_proof) {
        cell file_dict_proof = in_msg_body~load_ref();

        var storage_providers_dict = load_storage_providers_dict();
        var (_, success?) = storage_providers_dict.udict_get?(256, sender_addr);
        if (~ success?) {
            throw(error::unregistered_storage_provider);
        }

        var storage_provider_next_proofs_dict = load_storage_provider_next_proofs();
        var (val, found?) = storage_provider_next_proofs_dict.udict_get_ref?(256, sender_addr);
        if (~ found?) {
            throw(error::invalid_state);
        }
        var ds = val.begin_parse();
        var next_proof = ds~load_uint(64);

        var (
            torrent_hash, owner_address, file_merkle_hash, file_size_in_bytes, storage_period_in_sec, max_storage_proof_span_in_sec,
            treasury_address, treasury_fee_rate
        ) = load_order_info();
        var valid = check_proof(file_merkle_hash, next_proof, file_size_in_bytes, file_dict_proof);

        var storage_providers_last_proof_valid_dict = load_storage_provider_last_proof_valid();
        storage_providers_last_proof_valid_dict~udict_set_ref(256, sender_addr, begin_cell().store_uint(valid, 1).end_cell());
        save_storage_provider_last_proof_valid(storage_providers_last_proof_valid_dict);

        next_proof = rand(file_size_in_bytes);
        storage_provider_next_proofs_dict~udict_set_ref(256, sender_addr, begin_cell().store_uint(next_proof, 64).end_cell());
        save_storage_provider_next_proofs(storage_provider_next_proofs_dict);

        on_submit_storage_proof(sender_address, valid);
        return ();
    }

    if (op == op::recycle_undistributed_storage_fees) {
        recycle(sender_address);
        return ();
    }

    throw(error::unknown_op);
}

(int, slice, int, int, int, int, slice, int) get_order_info() method_id {
    return load_order_info();
}

int started() method_id {
    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    return started;
}

int get_period_finish() method_id {
    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    return period_finish;
}

int get_total_storage_providers() method_id {
    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    return total_storage_providers;
}

int earned(slice provider_address) method_id {
    (int wc, int provider_addr) = parse_std_addr(provider_address);
    var total_rewards_settled_and_unclaimed_for_providers_scaled = load_total_rewards_settled_and_unclaimed_for_providers();

    var (val, found?) = total_rewards_settled_and_unclaimed_for_providers_scaled.udict_get_ref?(256, provider_addr);
    if (found?) {
        var ds = val.begin_parse();
        return ds~load_uint(192) / (SCALE);
    }
    return 0;
}

int get_undistributed_rewards() method_id {
    var (
        started, total_storage_providers, total_rewards, total_rewards_per_sec_scaled, undistributed_rewards_scaled,
        per_sec_per_provider_total_rewards_settled_scaled, period_finish, last_settle_time
    ) = load_rewards_params();
    return undistributed_rewards_scaled / (SCALE);
}

int get_last_proof_valid(slice provider_address) method_id {
    (int wc, int provider_addr) = parse_std_addr(provider_address);
    var storage_providers_last_proof_valid_dict = load_storage_provider_last_proof_valid();

    var (val, found?) = storage_providers_last_proof_valid_dict.udict_get_ref?(256, provider_addr);
    if (found?) {
        var ds = val.begin_parse();
        return ds~load_uint(1);
    }
    return 0;
}

int get_next_proof(slice provider_address) method_id {
    (int wc, int provider_addr) = parse_std_addr(provider_address);
    var storage_provider_next_proofs_dict = load_storage_provider_next_proofs();

    var (val, found?) = storage_provider_next_proofs_dict.udict_get_ref?(256, provider_addr);
    if (~ found?) {
        return -1;
    }
    var ds = val.begin_parse();
    var next_proof = ds~load_uint(64);
    return next_proof;
}